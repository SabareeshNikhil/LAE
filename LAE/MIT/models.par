
Material = "InGaAs" {
*  Mole dependent material: InGaAs (x=0) = InAs
*  Mole dependent material: InGaAs (x=1) = GaAs

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 13.8239	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 13.8239	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 3.68996	# [1]
	alpha	= 3.0600e-04	# [1/K]

  * Gain dependence of refractive index in active region:
  * a) Linear model: delta n = a0 * ( (n+p)/(2 * N0) - 1)
  * b) Logarithmic model: delta n = a0 * log ( (n+p)/(2 * N0) )
  * where n/p are the carrier densities in the active region. 
	a0	= 0.0000e+00	# [1]
	N0	= 1.0000e+18	# [1/cm^3]
}


ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
  
  * Carrier dependence (imag) 
  *    delta_k_carr = 1 / (4*PI) * (wavelength^Gamma_k_carr_e*Ck_carr_e*n + wavelength^Gamma_k_carr_h*Ck_carr_h*p) 
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/(2 * Npar) - 1) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 * Npar ) )
	n_0	= 3.68996	# [1]
	k_0	= 0.0000e+00	# [1]
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
	Cn_temp	= 3.0600e-04	# [K^-1]
	Cn_carr	= 1	# [1]
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
	Gamma_k_carr	= 1 ,	1	# [1]
	Cn_gain	= 0.0000e+00	# [1]
	Npar	= 1.0000e+18	# [cm^-3]
       Formula = 0
	Tpar	= 3.0000e+02	# [K]
} 


* SpectralConversion
* { * Spectral Conversion Model
*   No default model, user has to define.
*   All wavelength parameters should be in nanometers.
*   Choice of Analytic or NumericalTable selected in Physics section of region
*  
*   ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
*   AbsorptionScaling = float        * scale absorption
*   EmissionScaling = float          * scale emission
*   Analytic (
*     AbsorptionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*     EmissionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*   )
*   NumericalTable (
*     AbsorptionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )
*     EmissionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )

*   ConversionEfficiency = 1.0
* }


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 1.6	# [J/(K cm^3)]
	cv_b	= 0.0000e+00	# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00	# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00	# [J/(K^4 cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
	1/kappa	= 8.62047	# [K cm/W]
	1/kappa_b	= 0.0000e+00	# [cm/W]
	1/kappa_c	= 0.0000e+00	# [cm/(W K)]
}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
	1/kappa	= 8.62047	# [K cm/W]
	1/kappa_b	= 0.0000e+00	# [cm/W]
	1/kappa_c	= 0.0000e+00	# [cm/(W K)]
}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 4.49861	# [eV]
	Eg0	= 0.782741	# [eV]
	alpha	= 4.4392e-04	# [eV K^-1]
	beta	= 2.2468e+02	# [K]
	alpha2	= 0.0000e+00	# [eV K^-1]
	beta2	= 0.0000e+00	# [K]
	EgMin	= -1.0000e+01	# [eV]
	dEgMin	= 0.0000e+00	# [eV]
	Tpar	= 3.0000e+02	# [K]
}


OldSlotboom
{ * deltaEg = dEg0 + Ebgn ( ln(N/Nref) + [ (ln(N/Nref))^2 + 0.5]^1/2 )
  * dEg0 is defined in BandGap section 
	Ebgn	= 0.0000e+00	# [eV]
	Nref	= 1.0000e+17	# [cm^(-3)]
}


Slotboom
{ * deltaEg = dEg0 + Ebgn ( ln(N/Nref) + [ (ln(N/Nref))^2 + 0.5]^1/2 )
  * dEg0 is defined in BandGap section 
	Ebgn	= 0.0000e+00	# [eV]
	Nref	= 1.0000e+17	# [cm^(-3)]
}

delAlamo
{ * deltaEg = dEg0 + Ebgn  ln(N/Nref) 
  * dEg0 is defined in BandGap section 
	Ebgn	= 0.0000e+00	# [eV]
	Nref	= 1.0000e+17	# [cm^(-3)]
}

Bennett
{ * deltaEg = dEg0 + Ebgn (ln(N/Nref))^2
  * dEg0 is defined in BandGap section 
	Ebgn	= 0.0000e+00	# [eV]
	Nref	= 1.0000e+17	# [cm^(-3)]
}

JainRoulston
{ * deltaEg = A_i N^(1/3) + B_i N^(1/4) + C_i N^(1/2) + D_i N^(1/2)
  * where i is n for n-type or p for p-type
	A_n	= 0.0000e+00	# [eV cm]
	A_p	= 0.0000e+00	# [eV cm]
	B_n	= 0.0000e+00	# [eV cm^(3/4)]
	B_p	= 0.0000e+00	# [eV cm^(3/4)]
	C_n	= 0.0000e+00	# [eV cm^(3/2)]
	C_p	= 0.0000e+00	# [eV cm^(3/2)]
	D_n	= 0.0000e+00	# [eV cm^(3/2)]
	D_p	= 0.0000e+00	# [eV cm^(3/2)]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
	fcaalpha_n	= 4.0000e-18	# [cm^2]
	fcaalpha_p	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 13.2185	# [1]
	gamma_2	= 5.014	# [1]
	gamma_3	= 5.814	# [1]
	so	= 0.3588	# [eV]
	ep_te	= 25.369	# [eV]
	ep_tm	= 25.369	# [eV]
	cr	= 0.0000e+00	# [eV]
	A1	= 0.0000e+00	# [1]
	A2	= 0.0000e+00	# [1]
	A3	= 0.0000e+00	# [1]
	A4	= 0.0000e+00	# [1]
	A5	= 0.0000e+00	# [1]
	A6	= 0.0000e+00	# [1]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
	eps	= 0.0000e+00	# [1]
	a0	= 5.8436e-10	# [cm]
	alpha	= 3.3442e-15	# [cm/K]
	Tpar	= 3.0000e+02	# [K]
	a_nu	= 1.0848	# [eV]
	a_c	= -6.1877e+00	# [eV]
	b_shear	= -1.7470e+00	# [eV]
	c_11	= 10.2105	# [1e-2 GPa]
	c_12	= 4.9765	# [1e-2 GPa]
	d1	= 0.0000e+00	# [eV]
	d2	= 0.0000e+00	# [eV]
	d3	= 0.0000e+00	# [eV]
	d4	= 0.0000e+00	# [eV]
	c_13	= 0.0000e+00	# [1e-2 GPa]
	c_33	= 0.0000e+00	# [1e-2 GPa]
	c0	= 0.0000e+00	# [cm]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
	Nc300	= 2.7524e+17	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
	Nv300	= 7.6193e+18	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *    where k=(x,y,z) is unit normal vector in reziprocal
  *    space.  '+' for light hole band, '-' for heavy hole band
  * 2: Heavy hole mass mh and light hole mass ml are
  *    specified explicitly.
  *    Use me as electron mass for free-carrier effect in 
  *    the refractive index model.
  * For electron masses, the following formula options exist:
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    use the a, ml, and mm parameters from eDOSMass.
  *    Typically, this leads to anisotropy.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 0 ,	2	# [1]
  * Formula(hole) 2 parameters:
	ml	= 0.0505	# [1]
	mh	= 0.5213	# [1]
	me	= 0.07	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Alternative to the specification of formula, offset,
  * and masses, you can make an arbitrary number of ladder
  * specification, 'eLadder(mz, mxy, deg, dE) and hLadder(...)
  * Here, mz is the quantization mass, mxy an in-plane DOS mass,
  * deg the ladder degeneracy, and dE an shift of the band edge
  * for the ladder (non-negative; the shift is always outward,
  * away from midgap).  When present, we solve the Schroedinger
  * equation separately for each ladder

  * Temperatures in rescaling of the mxy for eLadder and hLadder
	ShiftTemperature	= 1.0000e+10 ,	1.0000e+10	# [K]
}

QuantumPotentialParameters
{ * gamma:  weighting factor for quantum potential
  * theta:  weight for quadratic term
  * xi:     weight for quasi Fermi potential
  * eta:    weight for electrostatic potential
  * nu :    weight for DOS mass change from stress
	gamma	= 1 ,	1	# [1]
	theta	= 0.5 ,	0.5	# [1]
	xi	= 1 ,	1	# [1]
	eta	= 1 ,	1	# [1]
	nu	= 0.0000e+00 ,	0.0000e+00	# [1]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 1.5127e+04 ,	3.2950e+02	# [cm^2/(Vs)]
	Exponent	= 1.235 ,	1.818	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 1.5127e+04 ,	3.2950e+02	# [cm^2/(Vs)]
	Exponent	= 1.235 ,	1.818	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 1.1754e+04 ,	1.2888e+02	# [cm^2/Vs]
	Ar_alm  	= -1.1002e+00 ,	-1.3007e+00	# [1]
	Ar_mud  	= 3.3554e+03 ,	1.7554e+02	# [cm^2/Vs]
	Ar_ald  	= -1.4241e+00 ,	-1.2540e+00	# [1]
	Ar_N0   	= 8.5928e+16 ,	3.1921e+17	# [cm^(-3)]
	Ar_alN  	= 1.87355 ,	1.9557	# [1]
	Ar_a    	= 0.332469 ,	0.427021	# [1]
	Ar_ala  	= -7.6373e-02 ,	0.0000e+00	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 1.1754e+04 ,	1.2888e+02	# [cm^2/Vs]
	Ar_alm  	= -1.1002e+00 ,	-1.3007e+00	# [1]
	Ar_mud  	= 3.3554e+03 ,	1.7554e+02	# [cm^2/Vs]
	Ar_ald  	= -1.4241e+00 ,	-1.2540e+00	# [1]
	Ar_N0   	= 8.5928e+16 ,	3.1921e+17	# [cm^(-3)]
	Ar_alN  	= 1.87355 ,	1.9557	# [1]
	Ar_a    	= 0.332469 ,	0.427021	# [1]
	Ar_ala  	= -7.6373e-02 ,	0.0000e+00	# [1]
}

PhuMob: 
{ * Philips Unified Mobility Model:
	mumax_As  	= 1.4170e+03	# [cm^2/Vs]
	mumin_As  	= 52.2	# [cm^2/Vs]
	theta_As  	= 2.285	# [1]
	n_ref_As  	= 9.6800e+16	# [cm^(-3)]
	alpha_As  	= 0.68	# [1]
	mumax_P  	= 1.4140e+03	# [cm^2/Vs]
	mumin_P  	= 68.5	# [cm^2/Vs]
	theta_P  	= 2.285	# [1]
	n_ref_P  	= 9.2000e+16	# [cm^(-3)]
	alpha_P  	= 0.711	# [1]
	mumax_B   	= 4.7050e+02	# [cm^2/Vs]
	mumin_B   	= 44.9	# [cm^2/Vs]
	theta_B   	= 2.247	# [1]
	n_ref_B   	= 2.2300e+17	# [cm^(-3)]
	alpha_B   	= 0.719	# [1]
	nref_D    	= 4.0000e+20	# [cm^(-3)]
	nref_A    	= 7.2000e+20	# [cm^(-3)]
	cref_D    	= 0.21	# [1]
	cref_A    	= 0.5	# [1]
	me_over_m0	= 1	# [1]
	mh_over_m0	= 1.258	# [1]
	f_CW      	= 2.459	# [1]
	f_BH      	= 3.828	# [1]
	f_e       	= 1	# [1]
	f_h       	= 1	# [1]
	alpha1_g_k	= -7.2169e-01	# [1]
	alpha1_g_m	= -1.5952e+00	# [1]
}

EnormalDependence
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence_aniso
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence "100" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence_aniso "100" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence "110" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence_aniso "110" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence "111" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

EnormalDependence_aniso "111" 
{ * mu_Enorm^(-1) = mu_ac^(-1) + mu_sr^(-1)  with:
  * mu_ac = B / Enorm + C (T/T0)^(-k) ((N+N2)/N0)^lambda / Enorm^(1/3)
  * mu_sr^-1 = Enorm^(A+alpha*n/(N+N1)^nu) / delta + Enorm^3 / eta
  * EnormalDependence is added with factor exp(-l/l_crit), where l is
  * the distance to the nearest point of semiconductor/insulator interface.
  * Factor is equal to 1 if l_crit > 100.
	B	= 4.7500e+07 ,	9.9250e+06	# [cm/s]
	C	= 5.8000e+02 ,	2.9470e+03	# [cm^(5/3)/(V^(2/3)s)]
	N0	= 1 ,	1	# [cm^(-3)]
	N2	= 1 ,	1	# [cm^(-3)]
	lambda	= 0.125 ,	0.0317	# [1]
	k	= 1 ,	1	# [1]
	delta	= 5.8200e+14 ,	2.0546e+14	# [V/s]
	A	= 2 ,	2	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	aother	= 0.0000e+00 ,	0.0000e+00	# [1]
	N1	= 1 ,	1	# [cm^(-3)]
	nu	= 1 ,	1	# [1]
	eta	= 5.8200e+30 ,	2.0546e+30	# [V^2/cm*s]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
}

NegInterfaceChargeMobility
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = negative interface charge density
  * N0    = 1e11/cm^2
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

NegInterfaceChargeMobility_aniso
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = negative interface charge density
  * N0    = 1e11/cm^2
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

PosInterfaceChargeMobility
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = positive interface charge density
  * N0    = 1e11/cm^2
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

PosInterfaceChargeMobility_aniso
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = positive interface charge density
  * N0    = 1e11/cm^2
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

Coulomb2DMobility
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = Na (for electrons), Nd (for holes)
  * N0    = 1e18/cm^3
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

Coulomb2DMobility_aniso
{ *
  *         mu1 * (T/300)^T_exp * [1 + c/(c_trans * (Na,d/1e18)^N_exp1 * (Nc/N0)^Nc_exp1)]^c_exp
  * mu_ic = ------------------------------------------------------------------------------------
  *                           (Na,d/1e18)^N_exp2 * (Nc/N0)^Nc_exp2 * D * f(En)
  *
  * Nc    = Na (for electrons), Nd (for holes)
  * N0    = 1e18/cm^3
  * c     = n (for electrons) , p (for holes)
  * f(En) = 1 - exp[-(En/E0)^En_exp]
  * D     = exp[-dist/l_crit]
  * dist  = distance from interface
  *
	mu1	= 40 ,	40	# [cm^2/Vs]
	T_exp	= 1 ,	1	# [1]
	c_trans	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
	c_exp	= 1.5 ,	1.5	# [1]
	Nc_exp1	= 1 ,	1	# [1]
	Nc_exp2	= 0.5 ,	0.5	# [1]
	N_exp1	= 0.0000e+00 ,	0.0000e+00	# [1]
	N_exp2	= 0.0000e+00 ,	0.0000e+00	# [1]
	l_crit	= 1.0000e-06 ,	1.0000e-06	# [cm]
	E0	= 2.0000e+05 ,	2.0000e+05	# [V/cm]
	En_exp	= 2 ,	2	# [1]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0689e+07 ,	1.0689e+07	# [1]
	B_vsat	= 1.9080e+06 ,	1.9080e+06	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]
	alpha	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0689e+07 ,	1.0689e+07	# [1]
	B_vsat	= 1.9080e+06 ,	1.9080e+06	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}


SHEDistribution {
  * rho: mass density of the crystal
  * epsilon: Relative Permittivity of the semiconductor
  * eps_ins: Relative Permittivity of the insulator
	rho	= 2.329	# [g/cm^3]
	epsilon	= 11.7	# [1]
	eps_ins	= 2.15	# [1]
  * Following quantities have separate electron and hole values
  *   m_s: Semiconductor conductivity effective mass,
  *   m_dos: Semiconductor DOS effective mass,
  *   alpha: Non-parabolicity factor
  *   g: band degeneracy
  *   A: prefactor of the gate current density
  *   m_ins: Insulator effective mass
  *   E_barrier: height of barrier between semiconductor and insulator
  *   Lins: Meen free path in Insulator
  *   Lsem: mean free path in the high energy limit (used for relaxation time approximation)
  *   tau0: relaxation time in the low energy limit (used for relaxation time approximation)
  *   mumax: Phonon-limited mobility at 300 K which will be used to
  *   adjust acoustic phonon scattering rate when AdjustACPhononScattering
  *   option is turned on. By default, AdjustACPhononScattering option
  *   is turned off
  *   dac, vsl, and cl are for inelastic intravalley acoustic phonon scattering model
  *   Dac_cl: Acoustic deformation potential/sound vel for elastic acoustic phonon scattering model
  *   Dop: Deformation potential for optical phonon
  *   HbarOmega: optical phonon energy
  *   swv0: offset of the square wave vector for impurity scattering
  *   When MobilityScattering is turned-on,
  *   an additional elastic surface roughness scattering process is introduced where
  *   the input parameter is the correlation length of the roughness lsr
  *   Two different formulas are available for the Impact ionization model
  *   which is chosen by ii_formula
  *   ii_formula = 1
  *   ii_rate(E) = ii_rate1*((E - ii_energy1)/eV)^ii_exponent1 : ii_energy1 < E < ii_energy3
  *              = ii_rate2*((E - ii_energy2)/eV)^ii_exponent2 : ii_energy3 < E
  *
  *   ii_formula = 2
  *   ii_rate(E) = ii_rate1*Step(E - ii_energy1)*((E - ii_energy1)/eV)^ii_exponent1
  *              + ii_rate2*Step(E - ii_energy2)*((E - ii_energy2)/eV)^ii_exponent2
  *              + ii_rate3*Step(E - ii_energy3)*((E - ii_energy3)/eV)^ii_exponent3
  *   The impact ionization parameters for electrons are from
  *     C. Jungemann and B. Meinerzhagen,
  *     Hierarchical Device Simulation, The Monte-Carlo Perspective
  *   The impact ionization parameters for holes are from
  *     T. Kunikiyo, et al.,
  *     Journal of Applied Physics, vol. 79, pp. 7718-7725
  *
	m_s	= 0.26 ,	0.26	# [m0]
	m_dos	= 0.328 ,	0.689	# [m0]
	alpha	= 0.5 ,	0.669	# [1/eV]
	g	= 6 ,	1	# [1]
	A	= 1 ,	1	# [1]
	m_ins	= 0.5 ,	0.77	# [m0]
	E_barrier	= 3.1 ,	4.73	# [eV]
	Lins	= 2.0000e-07 ,	2.0000e-07	# [cm]
	Lsem	= 5.0000e-06 ,	1.0000e-06	# [cm]
	tau0	= 1.0000e-12 ,	1.0000e-12	# [s]
	mumax	= 1.4300e+03 ,	4.8000e+02	# [cm^2*V^-1*s^-1]
	dac	= 7.73 ,	5.03	# [eV]
	vsl	= 9.0000e+05 ,	9.0000e+05	# [cm/s]
	cl	= 2.0000e-03 ,	2.0000e-03	# [cm^2/s]
	Dac_cl	= 1.0270e-05 ,	6.2900e-06	# [eV*s/cm]
	Dop	= 1.2500e+09 ,	8.7000e+08	# [eV/cm]
	HbarOmega	= 0.06 ,	0.0633	# [eV]
	swv0	= 0.0000e+00 ,	0.0000e+00	# [cm^-2]
	lsr	= 1.2000e-07 ,	1.2000e-07	# [cm]
	ii_formula	= 1 ,	1	# [1]
	ii_rate1	= 1.4900e+11 ,	0.0000e+00	# [1/s]
	ii_rate2	= 1.1300e+12 ,	1.1400e+12	# [1/s]
	ii_rate3	= 0.0000e+00 ,	0.0000e+00	# [1/s]
	ii_energy1	= 1.128 ,	1.128	# [eV]
	ii_energy2	= 1.572 ,	1.49	# [eV]
	ii_energy3	= 1.75 ,	1.49	# [eV]
	ii_exponent1	= 3 ,	0.0000e+00	# [1]
	ii_exponent2	= 2 ,	3.4	# [1]
	ii_exponent3	= 0.0000e+00 ,	0.0000e+00	# [1]
  * Following tables are defined in order to fit impurity scattering
  * for majority and minority doping from 10^15 /cm^3 to 10^20 /cm^3
  * with the row index i representing the doping 10^(15 + i/4) /cm^3
  * See, for example, C. Jungemann and B. Meinerzhagen,
  * Hierarchical Device Simulation, The Monte-Carlo Perspective
  * When AdjustImpurityScattering option is turned on, these parameters
  * are neglected.
  *    efit(i) = majority minority : Electron fitting parameters
  *    hfit(i) = majority minority : Hole fitting parameters
	 efit( 0)	=	1.20698	 2.63089
	 efit( 1)	=	1.26585	 2.61522
	 efit( 2)	=	1.35031	 2.62123
	 efit( 3)	=	1.45972	 2.64571
	 efit( 4)	=	1.59727	 2.68504
	 efit( 5)	=	1.7681	 2.73218
	 efit( 6)	=	1.97625	 2.7758
	 efit( 7)	=	2.22278	 2.80091
	 efit( 8)	=	2.50474	 2.79066
	 efit( 9)	=	2.81348	 2.72938
	 efit(10)	=	3.13088	 2.60729
	 efit(11)	=	3.4262	 2.42644
	 efit(12)	=	3.66329	 2.2049
	 efit(13)	=	3.8209	 1.9745
	 efit(14)	=	3.91451	 1.77291
	 efit(15)	=	4.00744	 1.63637
	 efit(16)	=	4.2118	 1.5994
	 efit(17)	=	4.69302	 1.70363
	 efit(18)	=	5.69842	 2.01596
	 efit(19)	=	7.63117	 2.65859
	 efit(20)	=	11.1923	 3.85825
	 hfit( 0)	=	2.36872	 3.84998
	 hfit( 1)	=	2.47647	 3.82989
	 hfit( 2)	=	2.65631	 3.8773
	 hfit( 3)	=	2.91784	 3.98847
	 hfit( 4)	=	3.28127	 4.16424
	 hfit( 5)	=	3.77842	 4.40187
	 hfit( 6)	=	4.44356	 4.68485
	 hfit( 7)	=	5.2981	 4.97515
	 hfit( 8)	=	6.33175	 5.21189
	 hfit( 9)	=	7.48564	 5.32107
	 hfit(10)	=	8.64257	 5.23752
	 hfit(11)	=	9.62681	 4.932
	 hfit(12)	=	10.228	 4.42987
	 hfit(13)	=	10.2758	 3.80695
	 hfit(14)	=	9.74236	 3.16136
	 hfit(15)	=	8.78324	 2.57856
	 hfit(16)	=	7.66672	 2.11166
	 hfit(17)	=	6.65698	 1.78292
	 hfit(18)	=	5.94642	 1.59808
	 hfit(19)	=	5.66599	 1.56334
	 hfit(20)	=	5.94556	 1.70207
}

DirectTunnelling
{ * eps_ins:   insulator dielectricity,
  * E_F_M:     metal Fermi energy,
  * m_M:       metal effective mass,
  * m_ins:     insulator effective mass,
  * E_i:       energy nodes for pseudo barrier,
  * m_s:       semiconductor effective mass,
  * m_dos:     semiconductor DOS effective mass,
  * E_barrier: height of barrier between semiconductor and oxide,
  * See the manual for more details.
	eps_ins	= 2.13	# [1]
	E_F_M	= 11.7	# [eV]
	m_M	= 1	# [m0]
	m_ins	= 0.5 ,	0.77	# [m0]
	E0	= 0.0000e+00 ,	0.0000e+00	# [eV]
	E1	= 0.0000e+00 ,	0.0000e+00	# [eV]
	E2	= 0.0000e+00 ,	0.0000e+00	# [eV]
	m_s	= 0.19 ,	0.16	# [m0]
	m_dos	= 0.32 ,	0.0000e+00	# [m0]
	E_barrier	= 3.15 ,	4.73	# [eV]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 1.0600e-10	# [cm^3/s]
	alpha	= 0.0000e+00	# []
}

MLDAQMModel
{ * eLambda:  electron thermal wavelength at T=300K
  * hLambda:  hole thermal wavelength at T=300K
	eLambda	= 2.3500e-07	# [cm]
	hLambda	= 2.5000e-07	# [cm]
	ekpDOSfactor	= 1	# [1]
	hkpDOSfactor	= 0.4	# [1]
}

LatticeParameters
{ * Crystal system, elasticity, and deformation potential are defined.
  * X and Y vectors define the simulation coordinate system relative to the
  * crystal orientation system. Also there is an option to represent the crystal
  * system relative to the simulation one. In this case a keyword CrystalAxis 
  * has to be in this section and X and Y vectors will represent [100] and [010]
  * axis of the crystal system in the simulation one.
  * Additional notes: 1 Pa = 10 dyn/cm^2; tensile stress/strain is positive. 
  *  
  * S[i][j] - elasticity modulus; i,j = 1,2,...6 and j>=i.
  * CrystalSystem is symmetry, used ONLY to define the elasticity matrics.
  *   Cubic (CrystalSystem=0): S[1][1],S[1][2],S[4][4]
  *   Hexagonal (CrystalSystem=1): S[1][1],S[1][2],S[1][3],S[3][3],S[4][4]
  * NC is a number of conduction band levels taken into account
  * NV is a number of valence band levels taken into account
  * DC2(l) defines deformation potentials for conduction subband = l
  * DV2(l) defines deformation potentials for valence subband = l
  * The subband energy shift due to strain (E) is equal to the following sum:
  * D2[1]*E11 + D2[2]*E22 + D2[3]*E33 +
  * D2[4]*(0.5*D2[5]^2*((E11-E22)^2+(E22-E33)^2+(E33-E11)^2)+D2[6]^2*(E23^2+E13^2+E12^2))
  * 
	X	= (1, 0.0000e+00, 0.0000e+00) #[1]
	Y	= (0.0000e+00, 1, 0.0000e+00) #[1]
	S[1][1]	= 0.77	# [1e-12 cm^2/din]
	S[1][2]	= -2.1000e-01	# [1e-12 cm^2/din]
	S[4][4]	= 1.25	# [1e-12 cm^2/din]
	CrystalSystem	= 0	# [1]
	NC	= 3	# [1]
	NV	= 2	# [1]
	DC2(1)	= 0.9, -8.6000e+00, -8.6000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00	#[eV]
	DC2(2)	= -8.6000e+00, 0.9, -8.6000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00	#[eV]
	DC2(3)	= -8.6000e+00, -8.6000e+00, 0.9, 0.0000e+00, 0.0000e+00, 0.0000e+00	#[eV]
	DV2(1)	= -2.1000e+00, -2.1000e+00, -2.1000e+00, -1.0000e+00, 0.5, 4	#[eV]
	DV2(2)	= -2.1000e+00, -2.1000e+00, -2.1000e+00, 1, 0.5, 4	#[eV]

  * Deformation potentials of k.p model for electron bands
	xis	= 7	# [eV]
	dbs	= 0.53	# [eV]
	xiu	= 9.16	# [eV]
	xid	= 0.77	# [eV]

  * Deformation potentials of k.p model for hole bands
	adp	= 2.1	# [eV]
	bdp	= -2.3300e+00	# [eV]
	ddp	= -4.7500e+00	# [eV]
	dso	= 0.044	# [eV]

  * Luttinger parameters and Sverdlov's k.p theory parameter
	gamma_1	= 4.27	# [1]
	gamma_2	= 0.315	# [1]
	gamma_3	= 1.4576	# [1]
	Mkp	= 1.2	# [1]
}

Piezoelectric_Polarization
{ * The 'strain' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x                                     ]
  *   [P_y] = [psp_y                                     ]
  *   [P_z]   [psp_z + 2*d31*strain*(c11+c12-2*c13^2/c33)] (Formula 1)
  *   [P_z]   [psp_z + 2*strain*(e31 - e33*c13/c33)      ] (Formula 2)
  * 
  *   strain = (1-relax)*(a0-a)/a
  * 
  * The 'stress' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x]   [d11 d12 d13 d14 d15 d16]   [stress_XX]
  *   [P_y] = [psp_y] + [d21 d22 d23 d24 d25 d26] * [stress_YY]
  *   [P_z]   [psp_z]   [d31 d32 d33 d34 d35 d36]   [stress_ZZ]
  *                                                 [stress_YZ]
  *                                                 [stress_XZ]
  *                                                 [stress_XY]
  * 
  * The Poisson equation is:
  * 
  *   div(eps*grad(phi)) = -ro + activation*div(P),
  *   where P = (P_x,P_y,P_z) - polarization vector
  * 
  * Parameters:
  * 
  *   activation: non negative real calibration parameter
  *               to scale the polarization charge [1], 
  *               this value can be set in a 'Physics' section of input file 
  * 
  *   [psp_x]: spontaneous polarization vector,
  *   [psp_y]  defined in crystal system [C/cm^2]
  *   [psp_z]
  * 
  *   c11, c12, c13, c33: stiffness constants,
  *                       defined in crystal system [Pa]
  * 
  *   e31, e33: strain-charge piezoelectric coefficients,
  *             defined in crystal system [C/cm^2]
  * 
  *   a0: strained lattice constant [Angstrem]
  *   a: unstrained lattice constant [Angstrem]
  *   relax: relaxation parameter [1]
  * 
  *   d11 ... d36: piezoelectric coefficients,
  *                defined in crystal system [cm/V]
  * 
  * Fields:
  * 
  *   [stress_XX]: stress tensor,
  *   [stress_YY]  defined in stress system [Pa]
  *   [stress_ZZ]
  *   [stress_YZ]
  *   [stress_XZ]
  *   [stress_XY]
  * 
  *   [P_x]: polarization vector,
  *   [P_y]  defined in simulation system [C/cm^2]
  *   [P_z]
  * 
  * Coordinate systems:
  * 
  *   The simulation system is defined relative to the crystal
  *   system.  For example:
  * 
  *     LatticeParameters {
  *       X = (1, 0,  0)
  *       Y = (0, 0, -1)
  *     }
  * 
  *   The stress coordinate system is defined relative to the simulation
  *   system.  For example:
  * 
  *     Physics {
  *       Piezo (
  *         OriKddX = (-0.96  0.28  0)
  *         OriKddY = ( 0.28  0.96  0)
  *         Stress = (1e9  2e9  3e9  4e9  5e9  6e9)  # [Pa]
  *       )
  *     }
  * 
  *   To compute the polarization vector, the stress tensor is first
  *   transformed from the stress system to the crystal system.  Then
  *   the polarization vector is evaluated according to the 'strain' or
  *   'stress' model above.  Finally, the polarization vector is transformed
  *   from the crystal system to the simulation system.
  * 
  * piezoelectric coefficients:
	d11	= 0.0000e+00	# [cm/V]
	d12	= 0.0000e+00	# [cm/V]
	d13	= 0.0000e+00	# [cm/V]
	d14	= 0.0000e+00	# [cm/V]
	d15	= 0.0000e+00	# [cm/V]
	d16	= 0.0000e+00	# [cm/V]
	d21	= 0.0000e+00	# [cm/V]
	d22	= 0.0000e+00	# [cm/V]
	d23	= 0.0000e+00	# [cm/V]
	d24	= 0.0000e+00	# [cm/V]
	d25	= 0.0000e+00	# [cm/V]
	d26	= 0.0000e+00	# [cm/V]
	d31	= 0.0000e+00	# [cm/V]
	d32	= 0.0000e+00	# [cm/V]
	d33	= 0.0000e+00	# [cm/V]
	d34	= 0.0000e+00	# [cm/V]
	d35	= 0.0000e+00	# [cm/V]
	d36	= 0.0000e+00	# [cm/V]
  * 
  * spontaneous polarization:
	psp_x	= 0.0000e+00	# [C/cm^2]
	psp_y	= 0.0000e+00	# [C/cm^2]
	psp_z	= 0.0000e+00	# [C/cm^2]
  * 
	Formula	= 1	# [1]
  * 
  * stiffness constants:
	c11	= 0.0000e+00	# [Pa]
	c12	= 0.0000e+00	# [Pa]
	c13	= 0.0000e+00	# [Pa]
	c33	= 1	# [Pa]
  * 
  * piezoelectric coefficients:
	e31	= 0.0000e+00	# [C/cm^2]
	e33	= 0.0000e+00	# [C/cm^2]
  * 
  * strain parameters:
	a0	= 3.189	# [Angstrem]
	a	= 3.189	# [Angstrem]
	relax	= 0.1	# [1]
}


}
